 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/index.html b/index.html
index 6fd85a41f389dcb3f86531a829700ffaf189c7ee..2aaba9118ef1d28c28297dab47fca8b80a358cfc 100644
--- a/index.html
+++ b/index.html
@@ -2,99 +2,99 @@
 <!DOCTYPE html>
 <html lang="en">
 <head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Chinese-Thai Flashcard App</title>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js"></script>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js"></script>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.23.5/babel.min.js"></script>
     <script src="https://cdn.tailwindcss.com"></script>
     <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
     
     <style>
         /* Base styles for the watercolor card effect */
         .watercolor-card {
             background: linear-gradient(135deg, rgba(255, 255, 255, 0.95) 0%, rgba(248, 250, 252, 0.9) 100%);
             border-radius: 20px;
             box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1), 0 8px 16px rgba(0, 0, 0, 0.05);
             border: 1px solid rgba(255, 255, 255, 0.3);
             backdrop-filter: blur(10px);
             touch-action: manipulation;
         }
 
         /* Styles for the 3D card scene and individual cards */
         .card-scene {
-            width: min(70vw, 400px);
-            height: min(70vh, 550px);
+            width: min(80vw, 380px);
+            height: min(55vh, 520px);
             margin: 0 auto;
             perspective: 1000px;
             display: flex;
             align-items: center;
             justify-content: center;
             position: relative;
             overflow: hidden;
         }
 
         .card-3d {
             position: absolute;
             width: 100%;
             height: 100%;
             transform-style: preserve-3d;
             transition: transform 1.2s cubic-bezier(0.4, 0.0, 0.2, 1), opacity 0.5s ease-out;
             cursor: pointer;
             touch-action: pan-y;
             -webkit-tap-highlight-color: transparent;
         }
 
         .card-3d.flipped {
             transform: rotateY(180deg);
         }
 
         /* Swipe animations */
         .card-3d.swiping-left {
-            transform: translateX(-150vw) rotateZ(-30deg) scale(0.5); 
+            transform: translateX(-120vw) rotateZ(-20deg);
             opacity: 0;
-            transition: all 0.6s cubic-bezier(0.6, -0.28, 0.735, 0.045);
+            transition: transform 0.5s ease-out, opacity 0.5s ease-out;
         }
 
         .card-3d.swiping-right {
-            transform: translateX(150vw) rotateZ(30deg) scale(0.5); 
+            transform: translateX(120vw) rotateZ(20deg);
             opacity: 0;
-            transition: all 0.6s cubic-bezier(0.6, -0.28, 0.735, 0.045);
+            transition: transform 0.5s ease-out, opacity 0.5s ease-out;
         }
 
         /* New card animation */
         .card-3d.new-card {
-            opacity: 0;
-            transform: scale(0.8);
+            opacity: 0.5;
+            transform: scale(0.95) translateY(20px);
         }
 
         .card-3d.new-card.show {
             opacity: 1;
-            transform: scale(1);
-            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
+            transform: scale(1) translateY(0);
+            transition: transform 0.4s ease-out, opacity 0.4s ease-out;
         }
 
         /* Card faces (front and back) */
         .card-face {
             position: absolute;
             width: 100%;
             height: 100%;
             backface-visibility: hidden;
             -webkit-backface-visibility: hidden;
             border-radius: 20px;
             background: linear-gradient(135deg, rgba(255, 255, 255, 0.95) 0%, rgba(248, 250, 252, 0.9) 100%);
             box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15), 0 10px 20px rgba(0, 0, 0, 0.1);
             border: 1px solid rgba(255, 255, 255, 0.6);
             display: flex;
             align-items: center;
             justify-content: center;
             touch-action: manipulation;
         }
 
         .card-back {
             transform: rotateY(180deg);
         }
 
         .card-content {
             width: 100%;
diff --git a/index.html b/index.html
index 6fd85a41f389dcb3f86531a829700ffaf189c7ee..2aaba9118ef1d28c28297dab47fca8b80a358cfc 100644
--- a/index.html
+++ b/index.html
@@ -281,51 +281,51 @@
             0%, 100% { transform: translateX(-10px) translateY(-5px) rotate(0deg); }
             50% { transform: translateX(10px) translateY(5px) rotate(1deg); }
         }
 
         @keyframes parallaxMove2 {
             0%, 100% { transform: translateX(5px) translateY(-10px) rotate(0deg); }
             50% { transform: translateX(-5px) translateY(10px) rotate(-1deg); }
         }
 
         /* Centering utility for mobile */
         .mobile-center {
             display: flex;
             align-items: center;
             justify-content: center;
             min-height: 100vh;
             min-height: 100dvh;
             width: 100%;
             padding: 16px;
             box-sizing: border-box;
         }
         
         /* Responsive adjustments for smaller screens */
         @media (max-width: 480px) {
             .card-scene {
                 width: 90vw;
-                height: 60vh;
+                height: 55vh;
             }
             .mobile-center {
                 padding: 12px;
             }
         }
 
         /* Slide to unlock specific styles */
         .slide-container {
             position: relative;
             width: 100%;
             max-width: 300px;
             height: 50px;
             background-color: rgba(255, 255, 255, 0.2);
             border-radius: 25px;
             overflow: hidden;
             box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.1);
         }
 
         .slide-text {
             position: absolute;
             width: 100%;
             height: 100%;
             display: flex;
             align-items: center;
             justify-content: center;
diff --git a/index.html b/index.html
index 6fd85a41f389dcb3f86531a829700ffaf189c7ee..2aaba9118ef1d28c28297dab47fca8b80a358cfc 100644
--- a/index.html
+++ b/index.html
@@ -844,154 +844,184 @@
                 e.preventDefault();
                 
                 const touch = e.touches[0];
                 const deltaX = touch.clientX - touchStartX.current;
                 const deltaY = touch.clientY - touchStartY.current;
                 
                 const absX = Math.abs(deltaX);
                 const absY = Math.abs(deltaY);
                 
                 if (absX > absY && absX > 10) {
                     isDragging.current = true;
                     hasMovedEnough.current = absX > 20;
                     
                     const rotation = deltaX * 0.1;
                     const opacity = Math.max(0.3, 1 - (absX / window.innerWidth) * 1.5);
                     
                     currentTransform.current = { x: deltaX, rotation };
                     
                     cardRef.current.style.transform = `translateX(${deltaX}px) rotateZ(${rotation}deg)`;
                     cardRef.current.style.opacity = opacity;
                 }
             };
 
             const handleTouchEnd = (e) => {
                 if (!isCurrent || !cardRef.current) return;
-                
+
                 e.preventDefault();
                 
                 const touchEndTime = Date.now();
                 const touchDuration = touchEndTime - touchStartTime.current;
                 const { x: deltaX } = currentTransform.current;
                 
                 cardRef.current.style.transition = 'all 0.6s cubic-bezier(0.6, -0.28, 0.735, 0.045)';
                 
                 if (isDragging.current && hasMovedEnough.current) {
                     const swipeThreshold = window.innerWidth * 0.25;
                     
                     if (Math.abs(deltaX) > swipeThreshold) {
                         if (deltaX > 0) {
                             cardRef.current.classList.add('swiping-right');
                             setTimeout(() => onSwipe('right'), 300);
                         } else {
                             cardRef.current.classList.add('swiping-left');
                             setTimeout(() => onSwipe('left'), 300);
                         }
                     } else {
                         cardRef.current.style.transform = '';
                         cardRef.current.style.opacity = '';
                         currentTransform.current = { x: 0, rotation: 0 };
                     }
                 } else if (!isDragging.current && touchDuration < 300) {
-                    setIsFlipped(!isFlipped);
-                    onFlip && onFlip();
+                    const target = e.target;
+                    if (
+                        !target.closest('.chinese-character') &&
+                        !target.closest('.pinyin') &&
+                        !target.closest('.english-translation') &&
+                        !target.closest('.thai-translation')
+                    ) {
+                        setIsFlipped(!isFlipped);
+                        onFlip && onFlip();
+                    }
                 } else {
                     cardRef.current.style.transform = '';
                     cardRef.current.style.opacity = '';
                     currentTransform.current = { x: 0, rotation: 0 };
                 }
                 
                 isDragging.current = false;
                 hasMovedEnough.current = false;
             };
 
+            const handleClick = (e) => {
+                const target = e.target;
+                if (
+                    !target.closest('.chinese-character') &&
+                    !target.closest('.pinyin') &&
+                    !target.closest('.english-translation') &&
+                    !target.closest('.thai-translation')
+                ) {
+                    setIsFlipped(!isFlipped);
+                    onFlip && onFlip();
+                }
+            };
+
             const handlePronounce = (text, lang) => {
                 if (text && text.trim()) {
                     pronounceText(text.trim(), lang);
                 }
             };
 
             const frontParts = card.front.split('\n').map(s => s.trim()).filter(s => s);
             const backParts = card.back.split('\n').map(s => s.trim()).filter(s => s);
             
             const chineseChar = frontParts[0] || '';
             const pinyin = frontParts[1] || '';
             const englishTranslation = backParts[0] || '';
             const thaiTranslation = backParts[1] || '';
 
             return (
                 <div 
                     ref={cardRef}
                     className={`card-3d ${isFlipped ? 'flipped' : ''} ${className}`}
                     onTouchStart={handleTouchStart}
                     onTouchMove={handleTouchMove}
                     onTouchEnd={handleTouchEnd}
+                    onClick={handleClick}
                     style={{ touchAction: 'none' }}
                 >
                     {/* Front Face */}
                     <div className="card-face flex flex-col items-center justify-center p-6">
                         <div className="card-content">
-                            <div 
-                                className="chinese-character" 
-                                onClick={(e) => { 
-                                    e.stopPropagation(); 
-                                    handlePronounce(chineseChar, 'zh-CN'); 
+                            <div
+                                className="chinese-character"
+                                onClick={(e) => {
+                                    e.stopPropagation();
+                                    handlePronounce(chineseChar, 'zh-CN');
                                 }}
+                                onTouchStart={(e) => e.stopPropagation()}
+                                onTouchEnd={(e) => e.stopPropagation()}
                             >
                                 {chineseChar}
                             </div>
-                            <div 
-                                className="pinyin" 
-                                onClick={(e) => { 
-                                    e.stopPropagation(); 
-                                    handlePronounce(pinyin, 'zh-CN'); 
+                            <div
+                                className="pinyin"
+                                onClick={(e) => {
+                                    e.stopPropagation();
+                                    handlePronounce(pinyin, 'zh-CN');
                                 }}
+                                onTouchStart={(e) => e.stopPropagation()}
+                                onTouchEnd={(e) => e.stopPropagation()}
                             >
                                 {pinyin}
                             </div>
                             <div className="emoji-display">{card.emoji}</div>
                         </div>
                     </div>
 
                     {/* Back Face */}
                     <div className="card-face card-back flex flex-col items-center justify-center p-6">
                         <div className="card-content">
-                            <div 
-                                className="english-translation" 
-                                onClick={(e) => { 
-                                    e.stopPropagation(); 
-                                    handlePronounce(englishTranslation, 'en-US'); 
+                            <div
+                                className="english-translation"
+                                onClick={(e) => {
+                                    e.stopPropagation();
+                                    handlePronounce(englishTranslation, 'en-US');
                                 }}
+                                onTouchStart={(e) => e.stopPropagation()}
+                                onTouchEnd={(e) => e.stopPropagation()}
                             >
                                 {englishTranslation}
                             </div>
-                            <div 
-                                className="thai-translation" 
-                                onClick={(e) => { 
-                                    e.stopPropagation(); 
-                                    handlePronounce(thaiTranslation, 'th-TH'); 
+                            <div
+                                className="thai-translation"
+                                onClick={(e) => {
+                                    e.stopPropagation();
+                                    handlePronounce(thaiTranslation, 'th-TH');
                                 }}
+                                onTouchStart={(e) => e.stopPropagation()}
+                                onTouchEnd={(e) => e.stopPropagation()}
                             >
                                 {thaiTranslation}
                             </div>
                             <div className="emoji-display mt-4">{card.emoji}</div>
                         </div>
                     </div>
                 </div>
             );
         };
 
         // Main App component
         const App = () => {
             const [currentPage, setCurrentPage] = useState('landing');
             const [flashcards, setFlashcards] = useState([]);
             const [currentCardIndex, setCurrentCardIndex] = useState(0);
             const [rememberedCards, setRememberedCards] = useState([]);
             const [forgottenCards, setForgottenCards] = useState([]);
             const [showErrorModal, setShowErrorModal] = useState(false);
             const [errorMessage, setErrorMessage] = useState('');
             const [code, setCode] = useState('');
             const [activeDeckTitle, setActiveDeckTitle] = useState('');
 
             // Function to handle code submission and deck loading
             const handleCodeUnlock = () => {
                 const deckData = ACCESS_CODES[code];
 
EOF
)
